#### Domain Configuration for <DOMAIN>

upstream commafeed {
    server <HOST>:8082;
}

server {
    listen 443 ssl http2;
    server_name <DOMAIN>;
    access_log /var/log/nginx/https-commafeed-<DOMAIN>-access.log combined buffer=16k;
    error_log  /var/log/nginx/https-commafeed-<DOMAIN>-error.log  warn;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate     /etc/letsencrypt/live/<DOMAIN>/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/<DOMAIN>/privkey.pem;

    # Turn on session resumption, using a 10 min cache shared across nginx processes, as recommended by http://nginx.org/en/docs/http/configuring_https_servers.html
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # timeout during which a keep-alive client connection will stay open.
    keepalive_timeout   70;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    # Generate with: openssl dhparam -out /etc/nginx/conf.d/dhparam.pem 2048
    ssl_dhparam /etc/nginx/conf.d/dhparam.pem;

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128
-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3
-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    ## HTTP Strict Transport Security: tells browsers to require https:// without first checking
    ## the http:// version for a redirect. Warning: it is difficult to change your mind.
    ##
    ##    max-age: length of requirement in seconds (31536000 = 1 year)
    ##    includeSubdomains: force TLS for *ALL* subdomains (remove if this is not what you want)
    ##    preload: indicates you want browsers to ship with HSTS preloaded for your domain.
    ##
    ##    Submit your domain for preloading in browsers at: https://hstspreload.appspot.com
    # add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';
    ##    If you won't/can't turn on HTTPS for *all* subdomains, use this simpler version:
    # add_header Strict-Transport-Security 'max-age=31536000';
    add_header Strict-Transport-Security 'max-age=31536000';

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;
    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /etc/letsencrypt/live/<DOMAIN>/chain.pem;

    # If you want to specify a DNS resolver for stapling, you can uncomment the below
    # line. If you leave it commented, nginx will use your system resolver, which will probably
    # work just fine!
    # resolver <IP DNS resolver>;

    location = <URI> {
        return 301 https://$host$request_uri/;
    }

    # Deny REST access with apiKey (except starred category)
    location ~* ^<URI>/rest/(feed|category)/entriesAsFeed$ {
        if ($args ~* ^.*id=starred.*$) {
            rewrite <URI>/(.*) /$1  break;
            proxy_pass http://commafeed;
            add_header Front-End-Https on;
            add_header X-Frame-Options SAMEORIGIN;
        }
        return 404;
    }

    # Proxy pass /rss to commafeed server
    location ~ ^<URI>/(.*)$ {
        rewrite <URI>/(.*) /$1  break;
        proxy_pass http://commafeed;
        add_header Front-End-Https on;
        add_header X-Frame-Options SAMEORIGIN;
    }
    location ~ /\.ht {
        deny all;
    }
}
