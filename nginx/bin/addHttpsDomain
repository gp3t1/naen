#!/bin/bash
set -x

DATE=$(date +%H%M%S)
TMP_DIR=/etc/nginx/templates
CFG_DIR=/etc/nginx/conf.d
CFG_FILE=$CFG_DIR/nginx.conf

dom_template=$TMP_DIR/domain.template
dom_tmp=$TMP_DIR/newDomain.$DATE
loc_template=$TMP_DIR/location.template
loc_tmp=$TMP_DIR/newLocation.$DATE
upstream_template=$TMP_DIR/upstream.template
upstream_tmp=$TMP_DIR/newUpstreams.$DATE

function stash_upstream {
	[[ $# -ne 3 ]] && return 1
	local UPSTREAM=$1
	local APP_HOST=$2
	local APP_PORT=$3
	sed "	s|upstream UPSTREAM {|upstream ${UPSTREAM} {|
				s|server APP_HOST:APP_PORT;|server ${APP_HOST}:${APP_PORT};|" "$upstream_template" >> "$upstream_tmp"
	echo "" >> "$upstream_tmp"
	[[ -f $upstream_tmp ]]
}

function stash_location {
	[[ $# -ne 3 ]] && return 1
	local UPSTREAM=$1
	local PUB_URI=$2
	local APP_URI=$3
	sed " s|location = /PUBLIC_URI {|location = ${PUB_URI} {|
				s|location ~ ^/PUBLIC_URI/(.*)$ {|location ~ ^${PUB_URI}/(.*)$ {|
				s|rewrite /PUBLIC_URI/(.*) APP_URI/\$1  break;|rewrite ${PUB_URI}/(.*) ${APP_URI}/$1  break;|
				s|proxy_pass http://UPSTREAM;|proxy_pass http://${UPSTREAM};|" "$loc_template" >> "$loc_tmp"
	echo "" >> "$loc_tmp"
	[[ -f $loc_tmp ]]
}

function stash_domain {
	[[ $# -ne 1 ]] && return 1
	local DOMAIN=$1

	local upstreams=$'\n'$(cat "$upstream_tmp")
	local locations=$'\n'$(cat "$loc_tmp")
	upstreams=$(echo "$upstreams" | tr '\n' "\\n")
	locations=$(echo "$locations" | tr '\n' "\\n")
	sed "	s|# Domain Configuration for DOMAIN|# Domain Configuration for ${DOMAIN} ${upstreams}|
				s|server_name DOMAIN;|server_name ${DOMAIN};|
				s|/var/log/nginx/DOMAIN-access.log|/var/log/nginx/${DOMAIN}-access.log|
				s|/var/log/nginx/DOMAIN-error.log|/var/log/nginx/${DOMAIN}-error.log|
				s|/etc/letsencrypt/live/DOMAIN|/etc/letsencrypt/live/${DOMAIN}|
				s|# Locations for DOMAIN|# Locations for ${DOMAIN} ${locations}|" "$dom_template" >> "$dom_tmp"
	echo "" >> "$dom_tmp"
	[[ -f $dom_tmp ]]
}

function write_config {
	[[ ! -f $CFG_FILE ]] && echo "Config file not found!" && exit 1
	[[ ! -f $dom_tmp ]] && echo "no domain generated!" && exit 1
	local domain=$'\n'$(cat "$dom_tmp")
	sed -i.bak "s|# DOMAINS|# DOMAINS ${domain}|" "$CFG_FILE"
}

function main {
	if [[ $# -lt 2 ]]; then
		echo "usage: $0 <mondomain.xyz> <UpstreamName>=/<PublicUri>><UpstreamSrv>:<UpstreamPort>/<UpstreamUri>"
		#"gp3t1.xyz" "commafeed=/rss>naen-commafeed:8082/"
		exit 1
	fi

	local DOMAIN=$1
	shift

	while [[ -n $1 ]]; do
		local UPSTREAM=$( echo "$1" | awk -F "=" '{ print $1 }')
		local APP_HOST=$( echo "$1" | awk -F "=" '{ print $2 }' | awk -F ">" '{ print $2 }' | awk -F ":" '{ print $1 }')
		local APP_PORT=$( echo "$1" | awk -F "=" '{ print $2 }' | awk -F ">" '{ print $2 }' | awk -F ":" '{ print $2 }' | awk -F "/" '{ print $1 }')
		local PUB_URI=$( echo "$1" | awk -F "=" '{ print $2 }' | awk -F ">" '{ print $1 }')
		local APP_URI=/$( echo "$1" | awk -F "=" '{ print $2 }' | awk -F ">" '{ print $2 }' | awk -F ":" '{ print $2 }' | awk -F "/" '{ print $2 }')

		# normalize uris
		[[ $PUB_URI =~ ^/ ]] || PUB_URI="/$PUB_URI"
		[[ $PUB_URI =~ ^/.*/$ ]] && PUB_URI=${PUB_URI%%/}
		[[ $APP_URI =~ ^/ ]] || APP_URI="/$APP_URI"
		[[ $APP_URI =~ ^.*/$ ]] && APP_URI=${APP_URI%%/}

		echo "$UPSTREAM $APP_HOST $APP_PORT $PUB_URI $APP_URI"
		stash_upstream "$UPSTREAM" "$APP_HOST" "$APP_PORT"
		stash_location "$UPSTREAM" "$PUB_URI" "$APP_URI"
		shift
	done
	
	if [[ $(stash_domain "$DOMAIN") && $(write_config) ]] ; then
		rm "$dom_tmp" "$loc_tmp" "$upstream_tmp"
		exit 0
	else
		rm "$dom_tmp" "$loc_tmp" "$upstream_tmp"
		echo "error generating config!"
		exit 1
	fi
}

main "$@"